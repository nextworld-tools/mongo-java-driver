########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        shell: bash
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export DRIVERS_TOOLS="$(pwd)/../drivers-tools"

           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
           if [ "Windows_NT" == "$OS" ]; then # Magic variable in cygwin
              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
           fi

           export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
           export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
           export UPLOAD_BUCKET="${project}"
           export PROJECT_DIRECTORY="$(pwd)"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
           MONGODB_BINARIES: "$MONGODB_BINARIES"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export DRIVERS_TOOLS="$DRIVERS_TOOLS"
              export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
              export MONGODB_BINARIES="$MONGODB_BINARIES"
              export UPLOAD_BUCKET="$UPLOAD_BUCKET"
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

              export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
              export PATH="$MONGODB_BINARIES:$PATH"
              export PROJECT="${project}"
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          if [ "${project}" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ $DRIVERS_TOOLS
          else
            git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          fi
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  # Upload build artifacts that other tasks may depend on
  # Note this URL needs to be totally unique, while predictable for the next task
  # so it can automatically download the artifacts
  "upload build":
    # Compress and upload the entire build directory
    - command: archive.targz_pack
      params:
        # Example: mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        target: "${build_id}.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${build_id}.tar.gz
        # Example: /mciuploads/${UPLOAD_BUCKET}/gcc49/9dfb7d741efbca16faa7859b9349d7a942273e43/debug-compile-nosasl-nossl/mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${task_name}/${build_id}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  "exec script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        shell: bash
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/${file}

  "upload mo artifacts":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: drivers-tools/.evergreen/orchestration/server.log
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  "upload working dir logs":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          find ${PROJECT_DIRECTORY} -name \*.log | xargs tar czf working-dir-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-working-dir-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir-logs.tar.gz"

  "upload working dir":
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"
    - command: archive.targz_pack
      params:
        target: "drivers-dir.tar.gz"
        source_dir: ${DRIVERS_TOOLS}
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: drivers-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-drivers-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "drivers-dir.tar.gz"

  "upload test results":
    - command: attach.xunit_results
      params:
        file: ./src/*/build/test-results/*/TEST-*.xml

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          MONGODB_VERSION=${VERSION} TOPOLOGY=${TOPOLOGY} AUTH=${AUTH} SSL=${SSL} STORAGE_ENGINE=${STORAGE_ENGINE} ORCHESTRATION_FILE=${ORCHESTRATION_FILE} sh ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  "bootstrap mongohoused":
    - command: shell.exec
      params:
        script: |
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" sh ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/build-mongohouse-local.sh
    - command: shell.exec
      params:
        background: true
        script: |
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" sh ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/run-mongohouse-local.sh

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          AUTH="${AUTH}" SSL="${SSL}" MONGODB_URI="${MONGODB_URI}" SAFE_FOR_MULTI_MONGOS="${SAFE_FOR_MULTI_MONGOS}" TOPOLOGY="${TOPOLOGY}" \
          COMPRESSOR="${COMPRESSOR}" JDK="${JDK}" \
          AWS_ACCESS_KEY_ID=${aws_access_key_id} AWS_SECRET_ACCESS_KEY=${aws_secret_access_key} \
          AZURE_TENANT_ID=${azure_tenant_id} AZURE_CLIENT_ID=${azure_client_id} AZURE_CLIENT_SECRET=${azure_client_secret} \
          GCP_EMAIL=${gcp_email} GCP_PRIVATE_KEY=${gcp_private_key} \
          .evergreen/run-tests.sh

  "run reactive streams tck tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/run-reactive-streams-tck-tests.sh

  "run slow tests":
  - command: shell.exec
    type: test
    params:
      working_dir: "src"
      script: |
        ${PREPARE_SHELL}
        AUTH="${AUTH}" SSL="${SSL}" MONGODB_URI="${MONGODB_URI}" TOPOLOGY="${TOPOLOGY}" COMPRESSOR="${COMPRESSOR}" JDK="${JDK}" SLOW_TESTS_ONLY=true .evergreen/run-tests.sh

  "run scala tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SCALA="${SCALA}" AUTH="${AUTH}" SSL="${SSL}" MONGODB_URI="${MONGODB_URI}" SAFE_FOR_MULTI_MONGOS="${SAFE_FOR_MULTI_MONGOS}" TOPOLOGY="${TOPOLOGY}" JDK="${JDK}" .evergreen/run-scala-tests.sh

  "run socket tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          AUTH="${AUTH}" MONGODB_URI="${MONGODB_URI}" TOPOLOGY="${TOPOLOGY}" COMPRESSOR="${COMPRESSOR}" JDK="${JDK}" .evergreen/run-socket-tests.sh

  "run netty tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          STREAM_TYPE=netty AUTH="${AUTH}" SSL="${SSL}" MONGODB_URI="${MONGODB_URI}" TOPOLOGY="${TOPOLOGY}" COMPRESSOR="${COMPRESSOR}" JDK="${JDK}" .evergreen/run-tests.sh

  "run plain auth test":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          JDK="jdk8" MONGODB_URI="${plain_auth_mongodb_uri}" .evergreen/run-plain-auth-test.sh

  "add aws auth variables to file":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        silent: true
        script: |
          cat <<EOF > ${DRIVERS_TOOLS}/.evergreen/auth_aws/aws_e2e_setup.json
          {
              "iam_auth_ecs_account" : "${iam_auth_ecs_account}",
              "iam_auth_ecs_secret_access_key" : "${iam_auth_ecs_secret_access_key}",
              "iam_auth_ecs_account_arn": "arn:aws:iam::557821124784:user/authtest_fargate_user",
              "iam_auth_ecs_cluster": "${iam_auth_ecs_cluster}",
              "iam_auth_ecs_task_definition": "${iam_auth_ecs_task_definition}",
              "iam_auth_ecs_subnet_a": "${iam_auth_ecs_subnet_a}",
              "iam_auth_ecs_subnet_b": "${iam_auth_ecs_subnet_b}",
              "iam_auth_ecs_security_group": "${iam_auth_ecs_security_group}",

              "iam_auth_assume_aws_account" : "${iam_auth_assume_aws_account}",
              "iam_auth_assume_aws_secret_access_key" : "${iam_auth_assume_aws_secret_access_key}",
              "iam_auth_assume_role_name" : "${iam_auth_assume_role_name}",

              "iam_auth_ec2_instance_account" : "${iam_auth_ec2_instance_account}",
              "iam_auth_ec2_instance_secret_access_key" : "${iam_auth_ec2_instance_secret_access_key}",
              "iam_auth_ec2_instance_profile" : "${iam_auth_ec2_instance_profile}"
          }
          EOF

  "run aws auth test with regular aws credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          mongo aws_e2e_regular_aws.js
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        silent: true
        script: |
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
            USER=$(urlencode ${iam_auth_ecs_account})
            PASS=$(urlencode ${iam_auth_ecs_secret_access_key})
            MONGODB_URI="mongodb://$USER:$PASS@localhost"
          EOF
          JDK=${JDK} PROJECT_DIRECTORY=${PROJECT_DIRECTORY} .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with assume role credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          mongo aws_e2e_assume_role.js
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        silent: true
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
            USER=$(jq -r '.AccessKeyId' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            USER=$(urlencode $USER)
            PASS=$(jq -r '.SecretAccessKey' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            PASS=$(urlencode $PASS)
            SESSION_TOKEN=$(jq -r '.SessionToken' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            SESSION_TOKEN=$(urlencode $SESSION_TOKEN)
            MONGODB_URI="mongodb://$USER:$PASS@localhost"
          EOF
          JDK=${JDK} PROJECT_DIRECTORY=${PROJECT_DIRECTORY} DRIVERS_TOOLS=${DRIVERS_TOOLS} .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with aws EC2 credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          mongo aws_e2e_ec2.js
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          JDK=${JDK} .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with aws credentials as environment variables":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        silent: true
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=${iam_auth_ecs_account}
            export AWS_SECRET_ACCESS_KEY=${iam_auth_ecs_secret_access_key}
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          JDK=${JDK} .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with aws credentials and session token as environment variables":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        silent: true
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=$(jq -r '.AccessKeyId' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export AWS_SESSION_TOKEN=$(jq -r '.SessionToken' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          JDK=${JDK} .evergreen/run-mongodb-aws-test.sh

  "run aws ECS auth test":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws

          cat <<EOF > setup.js
          const mongo_binaries = "$MONGODB_BINARIES";
          const project_dir = "$PROJECT_DIRECTORY";
          EOF

          mongo --nodb setup.js aws_e2e_ecs.js
          cd -

  "run atlas data lake test":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          JDK=${JDK} .evergreen/run-atlas-data-lake-test.sh

  "run-ocsp-test":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          CA_FILE="$DRIVERS_TOOLS/.evergreen/ocsp/${OCSP_ALGORITHM}/ca.pem" \
          OCSP_TLS_SHOULD_SUCCEED="${OCSP_TLS_SHOULD_SUCCEED}" \
          OCSP_MUST_STAPLE="${OCSP_MUST_STAPLE}" \
          sh ${PROJECT_DIRECTORY}/.evergreen/run-ocsp-test.sh

  "run-valid-ocsp-server-ca-responder":
    - command: shell.exec
      params:
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          /opt/mongodbtoolchain/v3/bin/python3 -m venv ./venv
          ./venv/bin/pip3 install -r ${DRIVERS_TOOLS}/.evergreen/ocsp/mock-ocsp-responder-requirements.txt
    - command: shell.exec
      params:
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          nohup ./venv/bin/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \
          -p 8100 -v

  "run-revoked-ocsp-server-ca-responder":
    - command: shell.exec
      params:
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          /opt/mongodbtoolchain/v3/bin/python3 -m venv ./venv
          ./venv/bin/pip3 install -r ${DRIVERS_TOOLS}/.evergreen/ocsp/mock-ocsp-responder-requirements.txt
    - command: shell.exec
      params:
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          nohup ./venv/bin/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \
          -p 8100 \
          -v \
          --fault revoked

  "run-valid-ocsp-server-delegate-responder":
    - command: shell.exec
      params:
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          /opt/mongodbtoolchain/v3/bin/python3 -m venv ./venv
          ./venv/bin/pip3 install -r ${DRIVERS_TOOLS}/.evergreen/ocsp/mock-ocsp-responder-requirements.txt
    - command: shell.exec
      params:
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          nohup ./venv/bin/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \
          -p 8100 -v

  "run-revoked-ocsp-server-delegate-responder":
    - command: shell.exec
      params:
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          /opt/mongodbtoolchain/v3/bin/python3 -m venv ./venv
          ./venv/bin/pip3 install -r ${DRIVERS_TOOLS}/.evergreen/ocsp/mock-ocsp-responder-requirements.txt
    - command: shell.exec
      params:
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          nohup ./venv/bin/python3 ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \
          -p 8100 \
          -v \
          --fault revoked

  "run gssapi auth test":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          PROJECT_DIRECTORY=${PROJECT_DIRECTORY} JDK=${JDK} MONGODB_URI=${gssapi_auth_mongodb_uri} KDC=${gssapi_auth_kdc} REALM=${gssapi_auth_realm} KEYTAB_BASE64=${gssapi_auth_keytab_base64} .evergreen/run-gssapi-auth-test.sh

  "run mmapv1 storage test":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          PROJECT_DIRECTORY=${PROJECT_DIRECTORY} JDK=${JDK} TOPOLOGY=${TOPOLOGY} STORAGE_ENGINE=${STORAGE_ENGINE} MONGODB_URI="${MONGODB_URI}" .evergreen/run-mmapv1-storage-test.sh

  "run atlas test":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          JDK="jdk8" .evergreen/run-connectivity-tests.sh '${atlas_free_tier_uri}' '${atlas_replica_set_uri}' '${atlas_sharded_uri}' '${atlas_tls_v11_uri}' '${atlas_tls_v12_uri}' '${atlas_free_tier_uri_srv}' '${atlas_replica_set_uri_srv}' '${atlas_sharded_uri_srv}' '${atlas_tls_v11_uri_srv}' '${atlas_tls_v12_uri_srv}'

  "publish snapshot":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          RELEASE=false PROJECT_DIRECTORY=${PROJECT_DIRECTORY} NEXUS_USERNAME=${nexus_username} NEXUS_PASSWORD=${nexus_password} SIGNING_PASSWORD=${signing_password} SIGNING_KEY="${gpg_ascii_armored}" .evergreen/publish.sh

  "publish release":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          RELEASE=true PROJECT_DIRECTORY=${PROJECT_DIRECTORY} NEXUS_USERNAME=${nexus_username} NEXUS_PASSWORD=${nexus_password} SIGNING_PASSWORD=${signing_password} SIGNING_KEY="${gpg_ascii_armored}" .evergreen/publish.sh

  "cleanup":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd "$MONGO_ORCHESTRATION_HOME"
          # source the mongo-orchestration virtualenv if it exists
          if [ -f venv/bin/activate ]; then
            . venv/bin/activate
          elif [ -f venv/Scripts/activate ]; then
            . venv/Scripts/activate
          fi
          mongo-orchestration stop || true
          cd -
          rm -rf $DRIVERS_TOOLS || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "windows fix":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done

  "make files executable":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "run perf tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          PROJECT_DIRECTORY=${PROJECT_DIRECTORY} .evergreen/run-perf-tests.sh

  "send dashboard data":
    - command: json.send
      params:
        name: perf
        file: src/results.json

# Anchors

pre:
  - func: "fetch source"
  - func: "prepare resources"
  - func: "windows fix"
  - func: "fix absolute paths"
  - func: "make files executable"

post:
  # Removed, causing timeouts
  # - func: "upload working dir"
  - func: "upload mo artifacts"
  - func: "upload working dir logs"
  - func: "upload test results"
  - func: "cleanup"

tasks:

    # Compile / check build variant
    - name: static-analysis
      commands:
        - func: "exec script"
          vars:
            file: ".evergreen/compile.sh"
        - func: "upload build"

    - name: "test"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run tests"

    - name: "scala-tests"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run scala tests"

    - name: "reactive-streams-tck-test"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.2"
            TOPOLOGY: "server"
        - func: "run reactive streams tck tests"

    - name: "plain-auth-test"
      commands:
        - func: "run plain auth test"

    - name: "aws-auth-test"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
        - func: "add aws auth variables to file"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws ECS auth test"

    - name: "test-ocsp-rsa-valid-cert-server-staples"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-rsa-invalid-cert-server-staples"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-rsa-valid-cert-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-rsa-invalid-cert-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-rsa-valid-cert-server-staples-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-rsa-invalid-cert-server-staples-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-rsa-valid-cert-server-does-not-staple-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-rsa-invalid-cert-server-does-not-staple-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-rsa-soft-fail"
      tags: ["ocsp"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            OCSP_ALGORITHM: rsa
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-rsa-malicious-invalid-cert-mustStaple-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-rsa-malicious-delegate-responder-invalid-cert-mustStaple-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: rsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-rsa-malicious-no-responder-mustStaple-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: rsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-valid-cert-server-staples"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-ecdsa-invalid-cert-server-staples"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-valid-cert-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-ecdsa-invalid-cert-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-soft-fail"
      tags: ["ocsp"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-malicious-invalid-cert-mustStaple-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-ca-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-valid-cert-server-staples-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-ecdsa-invalid-cert-server-staples-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "true"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-valid-cert-server-does-not-staple-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-valid-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "1"

    - name: "test-ocsp-ecdsa-invalid-cert-server-does-not-staple-delegate-responder"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-malicious-delegate-responder-invalid-cert-mustStaple-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "run-revoked-ocsp-server-delegate-responder"
          vars:
            OCSP_ALGORITHM: ecdsa
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "test-ocsp-ecdsa-malicious-no-responder-mustStaple-server-does-not-staple"
      tags: ["ocsp"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling-singleEndpoint.json"
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run-ocsp-test"
          vars:
            OCSP_ALGORITHM: ecdsa
            OCSP_MUST_STAPLE: "false"
            OCSP_TLS_SHOULD_SUCCEED: "0"

    - name: "atlas-data-lake-test"
      commands:
        - func: "bootstrap mongohoused"
        - func: "run atlas data lake test"

    - name: "gssapi-auth-test"
      commands:
        - func: "run gssapi auth test"

    - name: "slow-test"
      commands:
      - func: "bootstrap mongo-orchestration"
      - func: "run slow tests"

    - name: "socket-test"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run socket tests"

    - name: "netty-test"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run netty tests"

    - name: "atlas-test"
      commands:
        - func: "run atlas test"

    - name: publish-snapshot
      depends_on:
        - variant: "static-checks"
          name: "static-analysis"
        - variant: ".tests-variant"
          name: "test"
        - variant: ".tests-slow-variant"
          name: "slow-test"
        - variant: ".test-gssapi-variant"
          name: "gssapi-auth-test"
        - variant: "plain-auth-test"
          name: "plain-auth-test"
        - variant: ".test-scala-variant"
          name: "scala-tests"
      commands:
        - func: "publish snapshot"

    - name: publish-release
      git_tag_only: true
      commands:
        - func: "publish release"

    - name: "perf"
      tags: ["perf"]
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run perf tests"
        - func: "send dashboard data"

    - name: "mmapv1-storage-test"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run mmapv1 storage test"

axes:
  - id: version
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
           VERSION: "latest"
           # Multiple mongos instances can be specified in the connection string
           # for this version.
           SAFE_FOR_MULTI_MONGOS: true
      - id: "4.4"
        display_name: "4.4"
        variables:
          VERSION: "4.4"
          # Multiple mongos instances can be specified in the connection string
          # for this version.
          SAFE_FOR_MULTI_MONGOS: true
      - id: "4.2"
        display_name: "4.2"
        variables:
           VERSION: "4.2"
           # Multiple mongos instances can be specified in the connection string
           # for this version.
           SAFE_FOR_MULTI_MONGOS: true
      - id: "4.0"
        display_name: "4.0"
        variables:
           VERSION: "4.0"
      - id: "3.6"
        display_name: "3.6"
        variables:
           VERSION: "3.6"
      - id: "3.4"
        display_name: "3.4"
        variables:
           VERSION: "3.4"
      - id: "3.2"
        display_name: "3.2"
        variables:
           VERSION: "3.2"
      - id: "3.0"
        display_name: "3.0"
        variables:
           VERSION: "3.0"
      - id: "2.6"
        display_name: "2.6"
        variables:
           VERSION: "2.6"
  - id: os
    display_name: OS
    values:
      - id: "linux"
        display_name: "Linux"
        run_on: rhel70-small
      - id: "linux-large"
        display_name: "Linux Large"
        run_on: rhel70-large
      - id: "ubuntu"
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-test

  - id: topology
    display_name: Topology
    values:
      - id: "standalone"
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: "replicaset"
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: "sharded-cluster"
        display_name: Sharded Cluster
        variables:
           TOPOLOGY: "sharded_cluster"
  - id: auth
    display_name: Authentication
    values:
      - id: "auth"
        display_name: Auth
        variables:
           AUTH: "auth"
      - id: "noauth"
        display_name: NoAuth
        variables:
           AUTH: "noauth"
  - id: ssl
    display_name: SSL
    values:
      - id: "ssl"
        display_name: SSL
        variables:
           SSL: "ssl"
      - id: "nossl"
        display_name: NoSSL
        variables:
           SSL: "nossl"
  - id: compressor
    display_name: Compressor
    values:
      - id: "snappy"
        display_name: Snappy
        variables:
           COMPRESSOR: "snappy"
      - id: "zlib"
        display_name: Zlib
        variables:
           COMPRESSOR: "zlib"
      - id: "zstd"
        display_name: Zstd
        variables:
           COMPRESSOR: "zstd"
  - id: jdk
    display_name: JDK
    values:
      - id: "jdk11"
        display_name: JDK11
        variables:
          JDK: "jdk11"
      - id: "jdk8"
        display_name: JDK8
        variables:
           JDK: "jdk8"

  - id: scala
    display_name: SCALA
    values:
      - id: "2.11"
        display_name: "Scala 2.11"
        variables:
          SCALA: "2.11.12"
      - id: "2.12"
        display_name: "Scala 2.12"
        variables:
          SCALA: "2.12.10"
      - id: "2.13"
        display_name: "Scala 2.13"
        variables:
          SCALA: "2.13.0"

  # Choice of MongoDB storage engine
  - id: storage-engine
    display_name: Storage
    values:
      - id: mmapv1
        display_name: MMAPv1
        variables:
           STORAGE_ENGINE: "mmapv1"

buildvariants:

# Test packaging and other release related routines
- name: static-checks
  display_name: "Static Checks"
  run_on: rhel70-small
  tasks:
    - name: "static-analysis"

- matrix_name: "tests-zlib-compression"
  matrix_spec: { compressor : "zlib", auth: "noauth", ssl: "nossl", jdk: "jdk8",
                 version: ["3.6", "4.0", "4.2", "4.4", "latest"],
                 topology: "standalone", os: "linux-large" }
  display_name: "${version} ${compressor} ${topology} ${auth} ${ssl} ${jdk} ${os} "
  tags: ["tests-variant"]
  tasks:
     - name: "test"

- matrix_name: "tests-snappy-compression"
  matrix_spec: { compressor : "snappy", auth: "noauth", ssl: "nossl", jdk: "jdk8",
                 version: ["3.4", "3.6", "4.0", "4.2", "4.4", "latest"],
                 topology: "standalone", os: "linux" }
  display_name: "${version} ${compressor} ${topology} ${auth} ${ssl} ${jdk} ${os} "
  tags: ["tests-variant"]
  tasks:
     - name: "test"

- matrix_name: "tests-zstd-compression"
  matrix_spec: { compressor : "zstd", auth: "noauth", ssl: "nossl", jdk: "jdk8",
                 version: ["4.2", "4.4", "latest"],
                 topology: "standalone", os: "linux" }
  display_name: "${version} ${compressor} ${topology} ${auth} ${ssl} ${jdk} ${os} "
  tags: ["tests-variant"]
  tasks:
    - name: "test"

- matrix_name: "tests-jdk8-unsecure"
  matrix_spec: { auth: "noauth", ssl: "nossl", jdk: "jdk8", version: "*", topology: "*", os: "linux" }
  display_name: "${version} ${topology} ${auth} ${ssl} ${jdk} ${os} "
  tags: ["tests-variant"]
  tasks:
     - name: "test"

- matrix_name: "tests-jdk-secure"
  matrix_spec: { auth: "auth", ssl: "ssl", jdk: ["jdk8", "jdk11"], version: ["4.0", "4.2", "4.4", "latest"], topology: "*", os: "linux" }
  display_name: "${version} ${topology} ${auth} ${ssl} ${jdk} ${os} "
  tags: ["tests-variant"]
  tasks:
     - name: "test"

- matrix_name: "tests-slow"
  matrix_spec: { auth: "noauth", ssl: "*", jdk: "jdk8", version: ["4.2"], topology: "*", os: "linux" }
  display_name: "Slow: ${version} ${topology} ${ssl} ${jdk} ${os} "
  tags: ["tests-slow-variant"]
  tasks:
  - name: "slow-test"

- matrix_name: "tests-socket"
  matrix_spec: { auth: "*", ssl: "nossl", jdk: "jdk8", version: ["4.2"], topology: "standalone", os: "linux" }
  display_name: "Socket: ${version} ${topology} ${auth} ${jdk} ${os} "
  tags: ["tests-socket-variant"]
  tasks:
     - name: "socket-test"

- matrix_name: "tests-netty"
  matrix_spec: { auth: "noauth", ssl: "*", jdk: "jdk8", version: ["4.2", "4.4"], topology: "replicaset", os: "linux" }
  display_name: "Netty: ${version} ${topology} ${ssl} ${jdk} ${os} "
  tags: ["tests-variant"]
  tasks:
    - name: "test"

- matrix_name: "tests-socket-snappy-compression"
  matrix_spec: { compressor : "snappy", auth: "noauth", ssl: "nossl", jdk: "jdk8", version: ["4.2"], topology: "standalone", os: "linux" }
  display_name: "Socket: ${version} ${compressor} ${topology} ${auth} ${jdk} ${os} "
  tags: ["tests-socket-variant"]
  tasks:
     - name: "socket-test"

- matrix_name: "tests-socket-zstd-compression"
  matrix_spec: { compressor : "zstd", auth: "noauth", ssl: "nossl", jdk: "jdk8", version: ["4.2"], topology: "standalone", os: "linux" }
  display_name: "Socket: ${version} ${compressor} ${topology} ${auth} ${jdk} ${os} "
  tags: ["tests-socket-variant"]
  tasks:
     - name: "socket-test"

- matrix_name: "test-gssapi"
  matrix_spec: { jdk: "*", os: "linux" }
  display_name: "GSSAPI (Kerberos) Auth test ${jdk} ${os} "
  tags: ["test-gssapi-variant"]
  tasks:
     - name: "gssapi-auth-test"

- matrix_name: "perf"
  matrix_spec:  { auth: "noauth", ssl: "nossl", jdk: "jdk8", version: "*", topology: "standalone", os: "linux" }
  batchtime: 1440 # run once a day
  display_name: "Perf Tests ${version} "
  tags: ["perf-variant"]
  tasks:
     - name: "perf"

- name: plain-auth-test
  display_name: "PLAIN (LDAP) Auth test"
  run_on: rhel70-small
  tasks:
    - name: "plain-auth-test"

# JAVA-3906
#- matrix_name: "aws-auth-test"
#  matrix_spec: { ssl: "nossl", jdk: ["jdk8", "jdk11"], version: ["4.4", "latest"], os: "ubuntu" }
#  display_name: "MONGODB-AWS Auth test ${version} ${jdk}"
#  run_on: ubuntu1804-test
#  tasks:
#    - name: "aws-auth-test"

- matrix_name: "ocsp-test"
  matrix_spec: { auth: "noauth", ssl: "ssl", jdk: "jdk11", version: ["4.4", "latest"], os: "ubuntu" }
  display_name: "OCSP test ${version} ${os}"
  tasks:
    - name: ".ocsp"

- name: atlas-data-lake-test
  display_name: "Atlas Data Lake test"
  run_on: ubuntu1804-test
  tasks:
    - name: "atlas-data-lake-test"

- name: atlas-test
  display_name: "Atlas test"
  run_on: rhel70-small
  tasks:
    - name: "atlas-test"

- name: "reactive-streams-tck-test"
  display_name: "Reactive Streams TCK tests"
  run_on: ubuntu1804-test
  tasks:
    - name: "reactive-streams-tck-test"

- matrix_name: "scala-tests"
  matrix_spec: { auth: "noauth", ssl: "nossl", jdk: "jdk11", version: ["4.4"], topology: "replicaset", scala: "*", os: "ubuntu" }
  display_name: "${scala} ${version} ${topology} ${os}"
  tags: ["test-scala-variant"]
  tasks:
    - name: "scala-tests"

- name: publish-snapshot
  display_name: "Publish Snapshot"
  run_on: ubuntu1804-test
  tasks:
    - name: "publish-snapshot"

- name: publish-release
  display_name: "Publish Release"
  run_on: ubuntu1804-test
  tasks:
    - name: "publish-release"

- matrix_name: "tests-storage-engines"
  matrix_spec: { auth: "noauth", ssl: "nossl", jdk: "jdk8", os: "linux", version: ["3.6", "4.0"], topology: ["replicaset", "sharded-cluster"], storage-engine: "mmapv1" }
  display_name: "${version} Storage ${storage-engine} ${jdk} ${os} ${topology}"
  tasks:
    - name: "mmapv1-storage-test"
